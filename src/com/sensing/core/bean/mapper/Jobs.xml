<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sensing.core.dao.IJobsDAO">
    <resultMap id="resultMap" type="com.sensing.core.bean.Jobs">
        <id column="uuid" property="uuid"/>
        <id column="name" property="name"/>
        <id column="type" property="type"/>
        <id column="state" property="state"/>
        <id column="jobs_type" property="jobsType"/>
        <id column="cap_people" property="capPeople"/>
        <id column="cap_nonmotor" property="capNonmotor"/>
        <id column="cap_motor" property="capMotor"/>
        <id column="begin_time" property="beginTime"/>
        <id column="end_time" property="endTime"/>
        <id column="begin_date" property="beginDate"/>
        <id column="end_date" property="endDate"/>
        <id column="alarm_type" property="alarmType"/>
        <id column="score" property="score"/>
        <id column="memo" property="memo"/>
        <id column="ratify_result" property="ratifyResult"/>
        <id column="ratify_user" property="ratifyUser"/>
        <id column="ratify_memo" property="ratifyMemo"/>
        <id column="ratify_time" property="ratifyTime"/>
        <id column="is_deleted" property="isDeleted"/>
        <id column="create_user" property="createUser"/>
        <id column="create_time" property="createTime"/>
        <id column="modify_user" property="modifyUser"/>
        <id column="modify_time" property="modifyTime"/>
        <id column="run_week" property="runWeek"/>
        <id column="level" property="level"/>
    </resultMap>
    <sql id="column_list">
		uuid,name,type,state,jobs_type,cap_people,cap_nonmotor,cap_motor,begin_time,end_time,begin_date,end_date,alarm_type,score,memo,ratify_result,ratify_user,ratify_memo,ratify_time,is_deleted,create_user,create_time,modify_user,modify_time,run_week,level
	</sql>
    <insert id="saveJobs">
	   insert into jobs(uuid,name,type,state,jobs_type,cap_people,cap_nonmotor,cap_motor,begin_time,end_time,begin_date,end_date,alarm_type,score,memo,ratify_result,ratify_user,ratify_memo,ratify_time,create_user,create_time,modify_user,modify_time,run_week,level)
	   values(
		   #{uuid},#{name},#{type},10,#{jobsType},#{capPeople},#{capNonmotor},#{capMotor},#{beginTime},#{endTime},#{beginDate},#{endDate},#{alarmType},#{score},#{memo},0,#{ratifyUser},#{ratifyMemo},#{ratifyTime},#{createUser},now(),#{modifyUser},#{modifyTime},#{runWeek},#{level}
	   )
	</insert>
    <select id="getJobs" resultMap="resultMap">
        select
        <include refid="column_list"/>
        from jobs
        where uuid = #{uuid}
    </select>
    <delete id="removeJobs">
		delete from jobs
		where uuid = #{uuid}
	</delete>
    <update id="updateCommon">
	   update jobs set name=#{name},type=#{type},state=#{state},jobs_type=#{jobsType},cap_people=#{capPeople},cap_nonmotor=#{capNonmotor},cap_motor=#{capMotor},begin_time=#{beginTime},end_time=#{endTime},begin_date=#{beginDate},end_date=#{endDate},alarm_type=#{alarmType},score=#{score},memo=#{memo},ratify_result=#{ratifyResult},ratify_user=#{ratifyUser},ratify_memo=#{ratifyMemo},ratify_time=#{ratifyTime},is_deleted=#{isDeleted},create_user=#{createUser},create_time=#{createTime},modify_user=#{modifyUser},modify_time=#{modifyTime}
	   where uuid=#{uuid}
	</update>
    <!--todo lxh (j.ratify_result = 1 or (j.ratify_result = 0 and j.state = 1)) 布控列表显示的是审批通过的列表 或者  待审核的撤控-->
    <!--todo state 布控状态 10:待启动 20:布控中  30:暂停中 40:休息中 50:已撤控  60:撤控中 70:已完成 -->
    <select id="jobList" resultType="com.sensing.core.bean.job.resp.JobListResp">
        select
            distinct j.uuid as uuid,
            j.name as jobName,
            j.state as state,
            j.ratify_result as ratifyResult,
            j.is_deleted as isDeleted,
            j.level,
            j.score,
            j.begin_time as beginTime,
            j.end_time as endTime,
            j.begin_date as beginDate,
            j.end_date as endDate,
            j.run_week as runWeek,
            (select count(*) from sys_subscribe ss where ss.job_id=j.uuid and ss.uid = #{f.uuid}) as subscribe,
            (select su.username from sys_user su where su.uuid = j.create_user)                                                                                as createUsername,
            (select GROUP_CONCAT(c1.channel_name) from channel c1, jobs_channel jc1 where j.uuid = jc1.job_uuid and c1.uuid = jc1.channel_uuid )              as channelname,
            (select GROUP_CONCAT(td1.template_db_name) from template_db td1, jobs_templatedb jt1 where j.uuid = jt1.job_uuid and td1.id = jt1.templatedb_id)   as templatename,
            (select count(*) from alarm a where a.job_uuid = j.uuid ) as alarmCount
        from jobs j left join jobs_channel jc on j.uuid = jc.job_uuid

        <where>
            and (j.ratify_result = 1 or (j.ratify_result = 0 and j.state = 60))
            <if test="f.state != null and f.state != '' ">
                and j.state =#{f.state}
            </if>
            <if test="f.name != null and f.name != '' ">
                and j.name like CONCAT('%',#{f.name},'%')
            </if>
            <if test="f.level != null and f.level != '' ">
                and j.level =#{f.level}
            </if>
            <if test="f.querytype != null and f.querytype == 1 ">
                and j.create_user = #{f.uuid}
            </if>
            and j.is_deleted != 1
        </where>
        order by j.create_time desc
        <if test="pageFlag != null and pageFlag == 'pageFlag'">
        LIMIT #{beginCount},#{pageRows}
        </if>

    </select>
    <select id="jobListCount" resultType="int">
        select count(distinct j.uuid)
        from jobs j
        left join jobs_channel jc on j.uuid = jc.job_uuid
        <where>
            and (j.ratify_result = 1 or (j.ratify_result = 0 and j.state = 60))
            <if test="f.state != null and f.state != '' ">
                and j.state =#{f.state}
            </if>
            <if test="f.name != null and f.name != '' ">
                and j.name like CONCAT('%',#{f.name},'%')
            </if>
               <if test="f.querytype != null and f.querytype == 1 ">
                and j.create_user = #{f.uuid}
            </if>
            and j.is_deleted != 1
        </where>
        <if test="pageFlag != null and pageFlag == 'pageFlag'">
            LIMIT #{beginCount},#{pageRows}
        </if>

    </select>

    <select id="ratifyList" resultType="com.sensing.core.bean.job.resp.JobRatifyListResp">

        select
        j.uuid,
        j.name AS name,
        j.create_time AS createTime,
        j.ratify_time AS ratifyTime,
        j.ratify_result AS ratifyResult,
        j.state AS state,
        j.jobs_type AS jobsType,
        j.create_time,
        (select su.username from sys_user su where su.uuid = j.create_user) AS createUserName,
        (select su.username from sys_user su where su.uuid = j.ratify_user) AS ratifyUserName
        from jobs j
        left join sys_user su on j.create_user = su.uuid
        where 1 = 1
        <if test="f.ratifyResult != null and f.ratifyResult != '' ">
            and j.ratify_result = #{f.ratifyResult}
        </if>
        <if test="f.name != null and f.name != '' ">
            and (su.username like CONCAT('%', #{f.name}, '%') or j.name like CONCAT('%', #{f.name}, '%'))
        </if>
        <if test="f.level != null and f.level != '' ">
            and j.level = #{f.level}
        </if>
        <if test="f.startTime != null and f.startTime != '' and f.endTime != null and f.endTime != '' ">
            and j.create_time >= #{f.startTime}
            <![CDATA[
            and j.create_time < #{f.endTime}
            ]]>
        </if>
        <if test="f.jobsType != null and f.jobsType != '' ">
            and j.jobs_type = #{f.jobsType}
        </if>
          <if test="f.querytype != null and f.querytype == 1 ">
            and j.create_user = #{f.uuid}
        </if>

        and j.is_deleted != 1
        order by j.create_time desc
    </select>
    <select id="ratifyListCount" resultType="int">

        select
        count(*)
        from jobs j
        left join sys_user su on j.create_user = su.uuid
        where 1 = 1
        <if test="f.ratifyResult != null and f.ratifyResult != '' ">
            and j.ratify_result = #{f.ratifyResult}
        </if>
        <if test="f.name != null and f.name != '' ">
            and (su.username like CONCAT('%', #{f.name}, '%') or j.name like CONCAT('%', #{f.name}, '%'))
        </if>
        <if test="f.level != null and f.level != '' ">
            and j.level = #{f.level}
        </if>
        <if test="f.startTime != null and f.startTime != '' and f.endTime != null and f.endTime != '' ">
            and j.create_time >= #{f.startTime}
            <![CDATA[
            and j.create_time < #{f.endTime}
            ]]>
        </if>
        <if test="f.jobsType != null and f.jobsType != '' ">
            and j.jobs_type = #{f.jobsType}
        </if>
        <if test="f.querytype != null and f.querytype == 1 ">
            and j.create_user = #{f.uuid}
        </if>
        and j.is_deleted != 1
        order by j.create_time desc
    </select>


	
	<select id="selectTemplatedbIdCount" resultType="int">
		select
		count(templatedb_id)
		from jobs_templatedb
		where templatedb_id = #{templatedbId}
	</select>

    <update id="updateOperate" parameterType="com.sensing.core.bean.job.req.UpdateOperateReq">
	   update jobs
	   <set>
            <if test="state !=null">
               state=#{state},
            </if>
            <if test="isDeleted !=null">
                is_deleted=#{isDeleted},
            </if>
       </set>
	   where uuid=#{jobUuid}
	</update>

    <update id="ratifyJob" parameterType="com.sensing.core.bean.job.req.RatifyJobReq">
	   update jobs set ratify_result=#{ratifyResult} ,ratify_memo=#{ratifyMemo},,ratify_user=#{ratifyUser}
	   where uuid=#{jobUuid}
	</update>

	<select id="getJobsByJobName" resultType="int">
		select
		count(*)
		from jobs
		where name = #{name} and is_deleted != 1
		 <if test="uuid != null and uuid == '' ">
		    and uuid != #{uuid}
        </if>
	</select>

    <insert id="saveJobsTempleteBetch">
        insert into jobs_templatedb(uuid,job_uuid,templatedb_id)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.uuid},#{item.job_uuid},#{item.templatedb_id}
            )
        </foreach>

    </insert>

    <delete id="removeTempleteChannel">
		delete from jobs_templatedb
		where uuid = #{uuid}
	</delete>

    <select id="getUpdateStateJob" resultMap="resultMap" parameterType="java.util.List">
        select
        <include refid="column_list"/>
        FROM jobs j WHERE  j.state IN
        <foreach item="item" index="index" collection="list" open="("
                 separator="," close=")">
            #{item}
        </foreach>
        and j.is_deleted=0
    </select>

    <update id="updateStateBetch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" separator=";">
            update jobs
            set state = #{item.newState}
            WHERE uuid = #{item.uuid}
        </foreach>
    </update>


</mapper>
