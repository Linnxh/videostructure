/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sensing.core.thrift.cap.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "all"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-28")
public class _capFacesSet implements org.apache.thrift.TBase<_capFacesSet, _capFacesSet._Fields>, java.io.Serializable, Cloneable, Comparable<_capFacesSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("_capFacesSet");

  private static final org.apache.thrift.protocol.TField I_FACE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("iFaceCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LST_FACES_FIELD_DESC = new org.apache.thrift.protocol.TField("lstFaces", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new _capFacesSetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new _capFacesSetTupleSchemeFactory();

  public int iFaceCount; // required
  public java.util.List<_capFaceDetectResult> lstFaces; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_FACE_COUNT((short)1, "iFaceCount"),
    LST_FACES((short)2, "lstFaces");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_FACE_COUNT
          return I_FACE_COUNT;
        case 2: // LST_FACES
          return LST_FACES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IFACECOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_FACE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("iFaceCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LST_FACES, new org.apache.thrift.meta_data.FieldMetaData("lstFaces", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, _capFaceDetectResult.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(_capFacesSet.class, metaDataMap);
  }

  public _capFacesSet() {
  }

  public _capFacesSet(
    int iFaceCount,
    java.util.List<_capFaceDetectResult> lstFaces)
  {
    this();
    this.iFaceCount = iFaceCount;
    setIFaceCountIsSet(true);
    this.lstFaces = lstFaces;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public _capFacesSet(_capFacesSet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.iFaceCount = other.iFaceCount;
    if (other.isSetLstFaces()) {
      java.util.List<_capFaceDetectResult> __this__lstFaces = new java.util.ArrayList<_capFaceDetectResult>(other.lstFaces.size());
      for (_capFaceDetectResult other_element : other.lstFaces) {
        __this__lstFaces.add(new _capFaceDetectResult(other_element));
      }
      this.lstFaces = __this__lstFaces;
    }
  }

  public _capFacesSet deepCopy() {
    return new _capFacesSet(this);
  }

  @Override
  public void clear() {
    setIFaceCountIsSet(false);
    this.iFaceCount = 0;
    this.lstFaces = null;
  }

  public int getIFaceCount() {
    return this.iFaceCount;
  }

  public _capFacesSet setIFaceCount(int iFaceCount) {
    this.iFaceCount = iFaceCount;
    setIFaceCountIsSet(true);
    return this;
  }

  public void unsetIFaceCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IFACECOUNT_ISSET_ID);
  }

  /** Returns true if field iFaceCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIFaceCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IFACECOUNT_ISSET_ID);
  }

  public void setIFaceCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IFACECOUNT_ISSET_ID, value);
  }

  public int getLstFacesSize() {
    return (this.lstFaces == null) ? 0 : this.lstFaces.size();
  }

  public java.util.Iterator<_capFaceDetectResult> getLstFacesIterator() {
    return (this.lstFaces == null) ? null : this.lstFaces.iterator();
  }

  public void addToLstFaces(_capFaceDetectResult elem) {
    if (this.lstFaces == null) {
      this.lstFaces = new java.util.ArrayList<_capFaceDetectResult>();
    }
    this.lstFaces.add(elem);
  }

  public java.util.List<_capFaceDetectResult> getLstFaces() {
    return this.lstFaces;
  }

  public _capFacesSet setLstFaces(java.util.List<_capFaceDetectResult> lstFaces) {
    this.lstFaces = lstFaces;
    return this;
  }

  public void unsetLstFaces() {
    this.lstFaces = null;
  }

  /** Returns true if field lstFaces is set (has been assigned a value) and false otherwise */
  public boolean isSetLstFaces() {
    return this.lstFaces != null;
  }

  public void setLstFacesIsSet(boolean value) {
    if (!value) {
      this.lstFaces = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case I_FACE_COUNT:
      if (value == null) {
        unsetIFaceCount();
      } else {
        setIFaceCount((java.lang.Integer)value);
      }
      break;

    case LST_FACES:
      if (value == null) {
        unsetLstFaces();
      } else {
        setLstFaces((java.util.List<_capFaceDetectResult>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case I_FACE_COUNT:
      return getIFaceCount();

    case LST_FACES:
      return getLstFaces();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case I_FACE_COUNT:
      return isSetIFaceCount();
    case LST_FACES:
      return isSetLstFaces();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof _capFacesSet)
      return this.equals((_capFacesSet)that);
    return false;
  }

  public boolean equals(_capFacesSet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_iFaceCount = true;
    boolean that_present_iFaceCount = true;
    if (this_present_iFaceCount || that_present_iFaceCount) {
      if (!(this_present_iFaceCount && that_present_iFaceCount))
        return false;
      if (this.iFaceCount != that.iFaceCount)
        return false;
    }

    boolean this_present_lstFaces = true && this.isSetLstFaces();
    boolean that_present_lstFaces = true && that.isSetLstFaces();
    if (this_present_lstFaces || that_present_lstFaces) {
      if (!(this_present_lstFaces && that_present_lstFaces))
        return false;
      if (!this.lstFaces.equals(that.lstFaces))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + iFaceCount;

    hashCode = hashCode * 8191 + ((isSetLstFaces()) ? 131071 : 524287);
    if (isSetLstFaces())
      hashCode = hashCode * 8191 + lstFaces.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(_capFacesSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIFaceCount()).compareTo(other.isSetIFaceCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIFaceCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iFaceCount, other.iFaceCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLstFaces()).compareTo(other.isSetLstFaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLstFaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstFaces, other.lstFaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("_capFacesSet(");
    boolean first = true;

    sb.append("iFaceCount:");
    sb.append(this.iFaceCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lstFaces:");
    if (this.lstFaces == null) {
      sb.append("null");
    } else {
      sb.append(this.lstFaces);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class _capFacesSetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public _capFacesSetStandardScheme getScheme() {
      return new _capFacesSetStandardScheme();
    }
  }

  private static class _capFacesSetStandardScheme extends org.apache.thrift.scheme.StandardScheme<_capFacesSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, _capFacesSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_FACE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iFaceCount = iprot.readI32();
              struct.setIFaceCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LST_FACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.lstFaces = new java.util.ArrayList<_capFaceDetectResult>(_list0.size);
                _capFaceDetectResult _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new _capFaceDetectResult();
                  _elem1.read(iprot);
                  struct.lstFaces.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLstFacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, _capFacesSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(I_FACE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.iFaceCount);
      oprot.writeFieldEnd();
      if (struct.lstFaces != null) {
        oprot.writeFieldBegin(LST_FACES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lstFaces.size()));
          for (_capFaceDetectResult _iter3 : struct.lstFaces)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class _capFacesSetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public _capFacesSetTupleScheme getScheme() {
      return new _capFacesSetTupleScheme();
    }
  }

  private static class _capFacesSetTupleScheme extends org.apache.thrift.scheme.TupleScheme<_capFacesSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, _capFacesSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIFaceCount()) {
        optionals.set(0);
      }
      if (struct.isSetLstFaces()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetIFaceCount()) {
        oprot.writeI32(struct.iFaceCount);
      }
      if (struct.isSetLstFaces()) {
        {
          oprot.writeI32(struct.lstFaces.size());
          for (_capFaceDetectResult _iter4 : struct.lstFaces)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, _capFacesSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.iFaceCount = iprot.readI32();
        struct.setIFaceCountIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lstFaces = new java.util.ArrayList<_capFaceDetectResult>(_list5.size);
          _capFaceDetectResult _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new _capFaceDetectResult();
            _elem6.read(iprot);
            struct.lstFaces.add(_elem6);
          }
        }
        struct.setLstFacesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

